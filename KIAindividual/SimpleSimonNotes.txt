x  Print welcome on lcd, press key to move on
x  Display instructions, press key to move on
x  Display colour information, press key to move on

x  into game loop:
x    display current turn on 7Segments
-    lights flash in sent[] sequence which is generated randomly using colours[], counter and rand(1, 4) + LUT
x    Wait for user response from buttons
x    Store user response in receive[]
x    Check for Win
x    if win_flag = 1:
x      light up the success onboard led
x      counter++ and display on 7segment
x      loop again
x    if win_flag = 0:
x      break
x      display lose message on lcd;
x      offer ability to play again


To finish after gen:
  void num_To_Colour(int num);


  dump:
  while (cont != 'A'){
    strcpy(lcd_string, "                ");
    EL_LCD_ClearDisplay();
    EL_LCD_EncodeASCIIString(lcd_string);
    EL_LCD_WriteChars(lcd_string, 16);
    strcpy(lcd_string, "PRESS A TO CONT.");
    EL_LCD_EncodeASCIIString(lcd_string);
    EL_LCD_WriteAddress(0x40);
    EL_LCD_WriteChars(lcd_string, 16);
    cont = EL_KEYPAD_ReadKey();
  }



  //PREDEFINED CONSTANTS FOR 7SEG DISPLAYS ---
  //Address Defines for SAA1064
  #define SAA1064_SA0 0x70
  #define SAA1064_SA1 0x72
  #define SAA1064_SA2 0x74
  #define SAA1064_SA3 0x76

  //Register Defines for SAA1064
  #define SAA1064_CTRL 0x00
  #define SAA1064_DIG1 0x01
  #define SAA1064_DIG2 0x02
  #define SAA1064_DIG3 0x03
  #define SAA1064_DIG4 0x04

  //Control Register Defines for SAA1064
  //Static display (2 digits) or Multiplexed (4 digits)
  #define SAA1064_MPX 0x01
  //Digits 1 and 2 On
  #define SAA1064_B0 0x02
  //Digits 3 and 4 On
  #define SAA1064_B1 0x04
  //Intensity of display
  #define SAA1064_INT0 0x00
  #define SAA1064_INT1 0x10
  #define SAA1064_INT2 0x20
  #define SAA1064_INT3 0x30
  #define SAA1064_INT4 0x40
  #define SAA1064_INT5 0x50
  #define SAA1064_INT6 0x60
  #define SAA1064_INT7 0x70

  //Default Mode: Multiplex On, All Digits On
  #define SAA1064_CTRL_DEF (SAA1064_MPX | SAA1064_B0 | SAA1064_B1)

  //Pin Defines for SAA1064
  #define D_L0 0x01
  #define D_L1 0x02
  #define D_L2 0x04
  #define D_L3 0x08
  #define D_L4 0x10
  #define D_L5 0x20
  #define D_L6 0x40
  #define D_L7 0x80

  const uint8_t SAA1064_SEGM[] = {0x3F,0x06, 0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};

  #define SAA1064_DP 0x80   //Decimal Point
  #define SAA1064_MINUS 0x40   //Minus Sign
  #define SAA1064_BLNK 0x00   //Blank Digit
  #define SAA1064_ALL 0xFF   //All Segments On


TESTED SEGMENTS (Tested?/Working?):

#LCD screens        = Y/Y
#Keypad taking input= Y/Y
#rand Function      = Y/Y
#Choice->Colour     = Y/Y
#Sending to Gen     = Y/Y
#Speaker+colours    = Y/N



void play_note(long duration, float freq){
  int i;
  long ontime = (long)(((float) SECOND)/freq);
  for(i = 0; i < (duration/ontime); i++){
    GPIO_SetValue(0, SPEAKER);
    Delay(ontime/2);
    GPIO_ClearValue(0, SPEAKER);
    Delay(ontime/2);
  }
}

void tetris(){
  int theme[111][2] = {{658, 125},{1320, 500},{990, 250},{1056, 250},{1188, 250},{1320, 125},{1188, 125},{1056, 250},{990, 250},{880, 500},{880, 250},{1056, 250},{1320, 500},{1188, 250},{1056, 250},{990, 750},{1056, 250},{1188, 500},{1320, 500},{1056, 500},{880, 500},{880, 500},{1188, 500},{1408, 250},{1760, 500},{1584, 250},{1408, 250},{1320, 750},{1056, 250},{1320, 500},{1188, 250},{1056, 250},{990, 500},{990, 250},{1056, 250},{1188, 500},{1320, 500},{1056, 500},{880, 500},{880, 500},{1320, 500},{990, 250},{1056, 250},{1188, 250},{1320, 125},{1188, 125},{1056, 250},{990, 250},{880, 500},{880, 250},{1056, 250},{1320, 500},{1188, 250},{1056, 250},{990, 750},{1056, 250},{1188, 500},{1320, 500},{1056, 500},{880, 500},{880, 500},{1188, 500},{1408, 250},{1760, 500},{1584, 250},{1408, 250},{1320, 750},{1056, 250},{1320, 500},{1188, 250},{1056, 250},{990, 500},{990, 250},{1056, 250},{1188, 500},{1320, 500},{1056, 500},{880, 500},{880, 500},{660, 1000},{528, 1000},{594, 1000},{495, 1000},{528, 1000},{440, 1000},{419, 1000},{495, 1000},{660, 1000},{528, 1000},{594, 1000},{495, 1000},{528, 500},{660, 500},{880, 1000},{838, 2000},{660, 1000},{528, 1000},{594, 1000},{495, 1000},{528, 1000},{440, 1000},{419, 1000},{495, 1000},{660, 1000},{528, 1000},{594, 1000},{495, 1000},{528, 500},{660, 500},{880, 1000},{838, 2000}};
  int i = 0;
  while(i < 111){
    tetris_play(MILISECOND * theme[i][1], theme[i][0]);
    i++;
  }
}


Colours observed:
rg
b
r
rg
b



rec_counter = 1;    //Counter starts at 1
choice_flag = 1;
rec_flag = 1;








//////////////////////////////////////////////////////
while(rec_flag == 1){
  sprintf(to_print, "COUNTER: %d\r\n", counter);
  print(to_print);
  sprintf(to_print, "REC COUNTER: %d\r\n", rec_counter);
  print(to_print);

  sprintf(to_print, "IN RECEIVE LOOP!");
  print(to_print);



  //Wait until a valid key is entered; prevents illegal input

  ////////////////////////////////////////////////
  while(choice_flag == 1){
    sprintf(to_print, "IN CHOICE LOOP!");
    print(to_print);
    colour_choice = EL_KEYPAD_ReadKey();
    sprintf(to_print, "KEYPAD %c\r\n", colour_choice);
    print(to_print);

    switch(colour_choice){
      case '1':
      choice_flag = 0;
      colour_choice_int = 1;
      break;

      case '2':
      choice_flag = 0;
      colour_choice_int = 2;
      break;

      case '3':
      choice_flag = 0;
      colour_choice_int = 3;
      break;

      case '4':
      choice_flag = 0;
      colour_choice_int = 4;
      break;

      default:
      choice_flag = 1;

    }
  }

  ///////////////////////////////////////////////
  sprintf(to_print, "OUT OF CHOICE LOOP\r\n");
  print(to_print);

  //append valid input to the receive array
  receive[rec_counter] = colour_choice_int;
  //loop until we have the required number of received variables
  if(rec_counter == counter){
    rec_flag = 0;
  }
  rec_counter++;
}
sprintf(to_print, "OUT OF RECEIVE LOOP!");
print(to_print);
